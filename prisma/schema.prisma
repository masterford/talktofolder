generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  assistantName String?   // Pinecone assistant name for this user
  accounts      Account[]
  sessions      Session[]
  folders       Folder[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  driveId     String    @unique
  name        String
  parentId    String?
  parent      Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[]  @relation("FolderHierarchy")
  lastIndexed DateTime?
  indexStatus String    @default("pending")
  files       File[]
  chats       Chat[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model File {
  id           String   @id @default(cuid())
  folderId     String
  folder       Folder   @relation(fields: [folderId], references: [id])
  driveId      String   @unique
  name         String
  mimeType     String
  size         BigInt
  lastModified DateTime
  indexed      Boolean  @default(false)
  chunks       Chunk[]
  createdAt    DateTime @default(now())
}

model Chunk {
  id         String   @id @default(cuid())
  fileId     String
  file       File     @relation(fields: [fileId], references: [id])
  content    String   @db.Text
  embedding  String   @db.Text // Store as JSON
  chunkIndex Int
  pageNumber Int?
  createdAt  DateTime @default(now())
}

model Chat {
  id        String    @id @default(cuid())
  folderId  String    @unique
  folder    Folder    @relation(fields: [folderId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  role      String // "user" or "assistant"
  content   String   @db.Text
  citations Json? // Array of file references
  createdAt DateTime @default(now())
}
